{"title":"初识Vue3","date":"2022-07-26T10:39:43.000Z","date_formatted":{"ll":"2022年7月26日","L":"2022/07/26","MM-DD":"07-26"},"link":"Vue/first-vue3","tags":["Vue3"],"categories":["Vue"],"updated":"2023-07-21T09:36:29.607Z","content":"<h4 id=\"首次学习-vue3-时的笔记\">首次学习 vue3 时的笔记<a title=\"#首次学习-vue3-时的笔记\" href=\"#首次学习-vue3-时的笔记\"></a></h4>\n<p>要从单个绑定获取多个 ref，请将  <code>ref</code>  绑定到一个更灵活的函数上：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;item in list&quot;</span> <span class=\"attr\">:ref</span>=<span class=\"string\">&quot;setItemRef&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>$attrs</code>  现在包含了所有传递给组件的 <code>attribute</code>，包括  <code>class</code>  和  <code>style</code>。</p>\n<p><code>ref()</code>用于基本类型 <code>reactive()</code>用于对象或数组 实现深层的响应式数据</p>\n<p>具名插槽 <code>slot=“qwe” </code>&gt;&gt;&gt;&gt;<code> v-solt:qwe</code></p>\n<p>自定义事件需要用<code>emits</code>接受</p>\n<p><code>setup</code>会接受两个参数</p>\n<p><code>props</code>接收后为 setup 第一个参数</p>\n<p><code>context </code></p>\n<p><code>attrs</code>值为对象，包含了未被<code>props</code>接受的来自父组件中的属性，包括<code>class</code>和<code>style</code></p>\n<p><code>slots</code>收到的插槽内容</p>\n<p><code>emit</code>分发自定义事件的函数，用于触发自定义事件</p>\n<p><code>expose</code> 指定组件向父组件暴露出去的公共函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">watch</span>(prop, <span class=\"title function_\">callback</span>(newValue,oldValue)=&gt;&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;, &#123;immediate：<span class=\"literal\">true</span>,<span class=\"attr\">deep</span>:<span class=\"literal\">true</span>&#125;)</span><br></pre></td></tr></table></figure>\n<h6 id=\"watch-监听对象\">watch 监听对象<a title=\"#watch-监听对象\" href=\"#watch-监听对象\"></a></h6>\n<p>1 监听<code>reactive</code>定义的对象时 <code>oldValue</code>无法正确获取，</p>\n<p>2 监听<code>reactive</code>定义的对象时 强制开启了<code>deep</code>深层监视，无法关闭</p>\n<p>3 监听<code>reactive</code>定义对象中的某个属性 ，<code>prop</code>不能直接写<code>ob1.prop</code>需要写成返回值的样式 <code>()=&gt;ob1.prop</code></p>\n<p>4 监听对象中的深层属性如<code>ob1.job</code>，需要开启<code>deep</code></p>\n<p><code>watchEffect</code>默认开启<code>immediate</code>，只监视回调函数中被使用的值</p>\n<h6 id=\"生命周期\">生命周期<a title=\"#生命周期\" href=\"#生命周期\"></a></h6>\n<p>创建前后&gt;&gt;<code> setup()</code></p>\n<p>挂载前后<code>onBeforeMount</code>/<code>onMounted</code></p>\n<p>更新前后<code>onBeforeUpdated</code>/<code>onUpdated</code></p>\n<p>卸载前后<code>onBeforeUnmount</code>/<code>onUnmounted</code></p>\n<h6 id=\"自定义-hook\">自定义 hook<a title=\"#自定义-hook\" href=\"#自定义-hook\"></a></h6>\n<p><code>toRef </code>创建一个 ref 对象，其 value 值指向另一个对象的中的某个属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"title function_\">toRef</span>(person, <span class=\"string\">&quot;name&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p><code>toRefs</code>可以展开一个 reactive 生成的 proxy 对象，让它成为一个普通对象，但该对象中的所有属性都是一个 ref 对象</p>\n<h6 id=\"移除了.native\">移除了.<code>native</code><a title=\"#移除了.native\" href=\"#移除了.native\"></a></h6>\n<p>想要为组件绑定如 click 这种原生事件时，只需注意不要在 emits 中接受即可，即可防止 click 被视为自定义事件，相同的，若要重载 click 事件，在 emits 中接收即可</p>\n<p>移除过滤器</p>\n<p><code>fragment </code>组件模板中可以不写根元素，减少了性能开销</p>\n<p><code>teleport</code>组件可以将某一部分元素输送到某个指定元素中，更方便定位。</p>\n<h6 id=\"异步组件\">异步组件<a title=\"#异步组件\" href=\"#异步组件\"></a></h6>\n<p>使用<code>defineAsyncComponent</code>来引入一个异步组件，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;defineAsyncComponent&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Child</span>=<span class=\"title function_\">defineAsyncComponent</span>(<span class=\"function\">()=&gt;</span><span class=\"keyword\">import</span>(<span class=\"string\">&#x27;./Components/Child&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">suspense</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">template</span> #<span class=\"attr\">default</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!--此处放置真正的组件--&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">todo-list</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">template</span> #<span class=\"attr\">fallback</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!--此处放置骨架屏/渲染期间的显示--&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Loading...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">suspense</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>shallowReactive</code>只有第一层数据拥有响应式</p>\n<p>如同</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ob1=<span class=\"title function_\">shallowReactive</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&quot;zhangsan&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"number\">18</span>,</span><br><span class=\"line\">    <span class=\"attr\">job</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">j1</span>:<span class=\"string\">&quot;stuff&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">salary</span>:<span class=\"number\">20</span> <span class=\"comment\">// 深层次的数据将会是一个普通的对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这样的数据，采用 shallowReactive 无法令 j1 和 salary 拥有响应式</p>\n<p><code>shallowRef</code>对于基本类型等同于 ref，对于对象类型，不会添加响应式</p>\n<p>readonly 只读</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ob1 = <span class=\"title function_\">readonly</span>(ob1)</span><br></pre></td></tr></table></figure>\n<p><strong><em>采用 readonly 不会令数据丢失响应式，但是会令数据不可更改</em></strong></p>\n<p><code>shallowReadonly</code>浅只读</p>\n<p>仅令 ob1 中的 name 和 age 不可更改，job 内部的属性可以更改</p>\n<p><code>toRaw</code>令一个 reactive 数据失去响应式</p>\n<p><code>markRaw</code>令一个 reactive 数据永远不能转为响应式</p>\n<p><strong><em>isRef:检查一个值是否为一个 ref 对象</em></strong><br>\n<strong><em>lsReactive:检查一个对象是否是由 reactive 创建的响应式代理</em></strong><br>\n<strong><em>isReadonly:检查—个对象是否是由 readonly 创建的只读代理<br>\nisProxy:检查一个对象是否是由 reactive 或者 readonly 方法创建的代理</em></strong></p>\n<p><code>provide</code>/<code>inject</code>适用于祖孙通信</p>\n<p>祖先组件无需指名传值给哪个后代，后代也无需声明数据来源</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">provide</span>(name, data)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">inject</span>(name)</span><br></pre></td></tr></table></figure>\n<p>customRef 自定义 ref</p>\n<hr>\n","prev":{"title":"vue-router中使用i18n来进行网页标题的国际化","link":"Vue/vue-router-i18n-html-title"},"plink":"http://hibi.pages.dev/Vue/first-vue3/","reading_time":"926 字约 6 分钟"}