{"title":"js中的定时器似乎比实际时间更慢？","date":"2023-08-01T15:35:23.000Z","date_formatted":{"ll":"2023年8月1日","L":"2023/08/01","MM-DD":"08-01"},"thumbnail":"https://cdn.jsdelivr.net/gh/hibichann/picgo@main/202308030952843.png","link":"JavaScript/timer-in-js","tags":["JavaScript"],"categories":["JavaScript"],"updated":"2023-08-03T02:12:57.490Z","content":"<p>有时你可能会注意到，你切换到了另一个网页，然后过一会儿再回到当前页面，这个页面上的某个计时器似乎比预期的要慢一些。<br>\n难道是开发者肆意为之？想要在你等待计时器的时候，让你多看几眼广告或者多等几秒再开始下载？当然不是，这是因为浏览器的一些优化策略和单进程的js导致的。</p>\n<h4 id=\"1.嵌套超时\">1.嵌套超时<a title=\"#1.嵌套超时\" href=\"#1.嵌套超时\"></a></h4>\n<p>正如 HTML 标准中规定的那样，一旦对 setTimeout的嵌套调用被安排了5次，浏览器将强制执行4毫秒的最小超时。<br>\n但这个嵌套的次数和超时时间各家浏览器的实可能不尽相同。</p>\n<p>这可以在下面的例子中看到，在这个例子中，我们嵌套了对setTimeout的调用，延迟为0毫秒，并记录每次调用处理程序时的延迟。</p>\n<p>前四次，延迟约为0 毫秒，之后约为 4 毫秒：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;run&quot;</span>&gt;</span>运行<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>之前<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>现在<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>实际延时<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">tbody</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;log&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> last = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> iterations = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">timeout</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 记录调用时间</span></span><br><span class=\"line\">  <span class=\"title function_\">logline</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getMilliseconds</span>());</span><br><span class=\"line\">  <span class=\"comment\">// 如果还没结束，计划下次调用</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (iterations-- &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(timeout, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">run</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 清除日志</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> log = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&quot;#log&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (log.<span class=\"property\">lastElementChild</span>) &#123;</span><br><span class=\"line\">    log.<span class=\"title function_\">removeChild</span>(log.<span class=\"property\">lastElementChild</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 初始化迭代次数和开始时间戳</span></span><br><span class=\"line\">  iterations = <span class=\"number\">10</span>;</span><br><span class=\"line\">  last = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getMilliseconds</span>();</span><br><span class=\"line\">  <span class=\"comment\">// 开启计时器</span></span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(timeout, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">logline</span>(<span class=\"params\">now</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 输出上一个时间戳、新的时间戳及差值</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> tableBody = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;log&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> logRow = tableBody.<span class=\"title function_\">insertRow</span>();</span><br><span class=\"line\">  logRow.<span class=\"title function_\">insertCell</span>().<span class=\"property\">textContent</span> = last;</span><br><span class=\"line\">  logRow.<span class=\"title function_\">insertCell</span>().<span class=\"property\">textContent</span> = now;</span><br><span class=\"line\">  logRow.<span class=\"title function_\">insertCell</span>().<span class=\"property\">textContent</span> = now - last;</span><br><span class=\"line\">  last = now;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&quot;#run&quot;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;click&quot;</span>, run);</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.jsdelivr.net/gh/hibichann/picgo@main/202308030952843.png\" alt=\"结果\" loading=\"lazy\" class=\"φbp\"></p>\n<h4 id=\"2.非活动标签的超时\">2.非活动标签的超时<a title=\"#2.非活动标签的超时\" href=\"#2.非活动标签的超时\"></a></h4>\n<p>为了优化后台标签的加载损耗（以及降低耗电量），浏览器会在非活动标签中强制执行一个最小的超时延迟。如果一个页面正在使用网络音频<br>\nAPI AudioContext 播放声音，也可以不执行该延迟。</p>\n<p>这方面的具体情况与浏览器有关：</p>\n<p>Firefox 桌面版和 Chrome 针对不活动标签都有一个 1 秒的最小超时值。 安卓版 Firefox<br>\n浏览器对不活动的标签有一个至少 15 分钟的超时，并可能完全卸载它们。<br>\n如果标签中包含 AudioContext，Firefox 不会对非活动标签进行节流。</p>\n<h4 id=\"3.单线程的-javascript\">3.单线程的 JavaScript<a title=\"#3.单线程的-javascript\" href=\"#3.单线程的-javascript\"></a></h4>\n<p>JS 是单线程的，有它独特的事件循环机制。当我们调用 setTimeout<br>\n时，浏览器会将回调函数放入事件队列中，等待执行。当主线程执行完毕后，会立即执行事件队列中的回调函数。如果主线程执行时间过长，那么回调函数就会被延迟执行。</p>\n<p>事件循环机制的执行顺序:</p>\n<blockquote>\n<p>1.执行当前执行栈中的顺序<br>\n2.当执行栈是空的时候，事件循环会从事件队列中取出一个任务进行执行，该任务是宏任务<br>\n3.当宏任务执行完毕后，事件循环会检查是否有微任务需要执行，如果有会依次执行所有微任务，直到微任务队列为空<br>\n4.重复执行步骤 2-3，直到事件队列和微任务队列均为空</p>\n</blockquote>\n<p>所以如果页面（或操作系统/浏览器）正忙于其他任务，超时也可能比预期的晚。需要注意的一个重要情况是，在调用<br>\nsetTimeout() 的线程结束之前，函数或代码片段不能被执行。例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;foo 被调用&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(foo, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;setTimeout 之后的代码&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>会在控制台输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout 之后的代码</span><br><span class=\"line\">foo 被调用</span><br></pre></td></tr></table></figure>\n<p>出现这个结果的原因是，尽管 setTimeout 以 0ms<br>\n的延迟来调用函数，但这个任务已经被放入了队列中并且等待下一次执行；并不是立即执行；队列中的等待函数被调用之前，当前代码必须全部运行完毕，因此这里运行结果并非预想的那样。</p>\n","next":{"title":"如何区分浏览器刷新和关闭？","link":"JavaScript/distinguish-between-browser-refresh-and-close"},"plink":"http://hibi.pages.dev/JavaScript/timer-in-js/","reading_time":"1091 字约 7 分钟"}